// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(GUEST)
  avatar    String?
  isVerified Boolean @default(false)
  verificationToken String?
  verificationCode String?
  verificationCodeExpires DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  // OAuth fields
  googleId  String?
  githubId  String?
  provider  String?  // 'local', 'google', 'github'
  // Enhanced profile fields
  bio       String?
  phone     String?
  timezone  String?
  preferences Json?  // User preferences (notifications, theme, etc.)
  lastLoginAt DateTime?
  isActive  Boolean @default(true)
  isOnline  Boolean @default(false)
  lastSeenAt DateTime?
  profilePrivacy String @default("public") // "public", "friends", "private"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizedEvents Event[] @relation("EventOrganizer")
  invitations     Invitation[]
  tasks           Task[] @relation("TaskAssignee")
  createdTasks    Task[] @relation("TaskCreator")
  completedTasks  Task[] @relation("TaskCompleter")
  chatMessages    ChatMessage[]
  polls           Poll[]
  pollVotes       PollVote[]
  eventAttendees  EventAttendee[]
  activityLogs    ActivityLog[]

  // Friend system
  sentFriendRequests     FriendRequest[] @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestReceiver")
  friendships1           Friendship[] @relation("FriendshipUser1")
  friendships2           Friendship[] @relation("FriendshipUser2")

  // Private chat
  sentPrivateMessages    PrivateMessage[] @relation("PrivateMessageSender")
  receivedPrivateMessages PrivateMessage[] @relation("PrivateMessageReceiver")

  // Message reactions
  messageReactions       MessageReaction[]
  privateMessageReactions PrivateMessageReaction[] @relation("PrivateMessageReactions")

  // Whiteboard elements
  whiteboardElements     WhiteboardElement[]

  // Secure invitations
  sentInvitations        SecureInvitation[] @relation("InvitationsSent")
  notifications   Notification[]
  sentNotifications Notification[] @relation("NotificationSender")
  eventTemplates  EventTemplate[]
  checkIns        CheckIn[]

  @@map("users")
}

model Event {
  id           String    @id @default(cuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  location     String?
  isPublic     Boolean   @default(false)
  maxAttendees Int?
  inviteCode   String    @unique
  organizerId  String
  // Enhanced event fields
  category     String?   // 'wedding', 'conference', 'hackathon', etc.
  tags         String?   // Comma-separated tags (SQLite limitation)
  imageUrl     String?   // Event banner/image (legacy - single image)
  images       Json?     // Array of image URLs (multiple images)
  venue        Json?     // Venue details (address, coordinates, etc.)
  agenda       Json?     // Event agenda/schedule
  settings     Json?     // Event settings (notifications, permissions, etc.)
  budget       Float?    // Event budget
  actualCost   Float?    // Actual cost spent
  status       EventStatus @default(DRAFT)
  isTemplate   Boolean   @default(false)
  templateId   String?   // If created from template
  qrCode       String?   // QR code for check-in
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  organizer     User            @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  invitations   Invitation[]
  tasks         Task[]
  chatMessages  ChatMessage[]
  polls         Poll[]
  attendees     EventAttendee[]
  notifications Notification[]
  checkIns      CheckIn[]
  whiteboards   Whiteboard[]
  secureInvitations SecureInvitation[]

  @@map("events")
}

model EventAttendee {
  id       String @id @default(cuid())
  eventId  String
  userId   String
  joinedAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_attendees")
}

model Invitation {
  id          String           @id @default(cuid())
  eventId     String
  email       String
  status      InvitationStatus @default(PENDING)
  invitedBy   String
  invitedAt   DateTime         @default(now())
  respondedAt DateTime?
  rsvpData    Json?            // Store custom RSVP form responses

  // Relations
  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  invitedByUser User @relation(fields: [invitedBy], references: [id])

  @@unique([eventId, email])
  @@map("invitations")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  assigneeId  String?
  eventId     String
  createdById String
  images      Json?      // Array of image URLs

  // Completion details
  completedAt     DateTime? // When the task was completed
  completedById   String?   // Who completed the task
  completionNote  String?   // Comment/note about completion
  completionImages Json?    // Array of completion proof images

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  assignee    User?  @relation("TaskAssignee", fields: [assigneeId], references: [id])
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id])
  completedBy User?  @relation("TaskCompleter", fields: [completedById], references: [id])
  notifications Notification[]

  @@map("tasks")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  mediaUrl  String?     // URL for images, voice messages, etc.
  mediaType String?     // MIME type (image/jpeg, audio/webm, etc.)
  duration  Int?        // Duration in seconds for voice messages
  senderId  String
  eventId   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  sender User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  event  Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  reactions MessageReaction[]

  @@map("chat_messages")
}

model Poll {
  id           String   @id @default(cuid())
  title        String
  description  String?
  createdById  String
  eventId      String?
  allowMultiple Boolean @default(false)
  endDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdBy User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
  event     Event?      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  options   PollOption[]
  votes     PollVote[]

  @@map("polls")
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  order  Int    @default(0)
  pollId String

  // Relations
  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]

  @@map("poll_options")
}

model PollVote {
  id       String   @id @default(cuid())
  pollId   String
  optionId String
  userId   String
  createdAt DateTime @default(now())

  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, optionId])
  @@map("poll_votes")
}

// Enhanced Models for Advanced Features

model ActivityLog {
  id          String       @id @default(cuid())
  action      ActivityType
  description String
  userId      String?
  entityType  String?      // 'event', 'task', 'user', etc.
  entityId    String?
  metadata    Json?        // Additional data about the action
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model Notification {
  id          String           @id @default(cuid())
  title       String           // "New task assigned", "User joined event"
  message     String           // Detailed notification message
  type        NotificationType // Type of notification
  isRead      Boolean          @default(false)

  // Recipient
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional references to related entities
  eventId     String?
  event       Event?           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  taskId      String?
  task        Task?            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fromUserId  String?          // Who triggered the notification
  fromUser    User?            @relation("NotificationSender", fields: [fromUserId], references: [id], onDelete: SetNull)

  // Metadata
  actionUrl   String?          // URL to navigate when clicked
  priority    NotificationPriority @default(NORMAL)
  sentAt      DateTime?

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("notifications")
  @@index([userId, isRead])
  @@index([createdAt])
}

model EventTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  template    Json     // Template structure
  isPublic    Boolean  @default(false)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("event_templates")
}

model CheckIn {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  checkedAt DateTime @default(now())
  method    String   // 'qr', 'manual', 'auto'
  location  Json?    // GPS coordinates if available

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("check_ins")
}

// Enums
enum Role {
  ADMIN
  ORGANIZER
  GUEST
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELLED
}

enum NotificationType {
  USER_JOINED_EVENT
  USER_LEFT_EVENT
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_OVERDUE
  EVENT_CREATED
  EVENT_UPDATED
  EVENT_CANCELLED
  INVITE_RECEIVED
  INVITE_ACCEPTED
  INVITE_DECLINED
  CHAT_MESSAGE
  SYSTEM_ANNOUNCEMENT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ActivityType {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  EVENT_CREATED
  EVENT_UPDATED
  EVENT_DELETED
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  MESSAGE_SENT
  POLL_CREATED
  POLL_VOTED
  INVITATION_SENT
  RSVP_RECEIVED
}

enum MessageType {
  TEXT
  IMAGE
  VOICE
  FILE
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // "pending", "accepted", "declined"
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("FriendshipUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("FriendshipUser2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model PrivateMessage {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  messageType String  @default("text") // "text", "image", "file"
  fileUrl    String?
  fileName   String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("PrivateMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("PrivateMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  reactions PrivateMessageReaction[]

  @@map("private_messages")
}

model PrivateMessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String   // "👍", "❤️", "😂", etc.
  createdAt DateTime @default(now())

  message PrivateMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User           @relation("PrivateMessageReactions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("private_message_reactions")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String   // "👍", "❤️", "😂", etc.
  createdAt DateTime @default(now())

  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model Whiteboard {
  id        String   @id @default(cuid())
  eventId   String
  name      String   @default("Whiteboard")
  data      Json     // Stores the whiteboard canvas data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  elements WhiteboardElement[]

  @@map("whiteboards")
}

model WhiteboardElement {
  id           String   @id @default(cuid())
  whiteboardId String
  type         String   // "draw", "text", "image", "shape"
  data         Json     // Element-specific data (coordinates, text, etc.)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  whiteboard Whiteboard @relation(fields: [whiteboardId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("whiteboard_elements")
}

model SecureInvitation {
  id        String   @id @default(cuid())
  email     String
  eventId   String
  invitedBy String
  token     String   @unique
  status    String   @default("PENDING") // "PENDING", "ACCEPTED", "DECLINED", "EXPIRED"
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  inviter   User  @relation("InvitationsSent", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@map("secure_invitations")
}


